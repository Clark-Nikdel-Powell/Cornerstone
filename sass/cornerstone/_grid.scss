/*
** This is the best grid
** If I can say so myself
** But I am biased
*/

$grid_column_count: 12;

.row {
	display: block;
	@if $max_width { max-width: $max_width; }
	margin-left: auto;
	margin-right: auto;
	@if $row_pad { padding: $row_pad; }

	&:not(.table) {@extend %clearfix;}
	.row {max-width: none;}
	&.nopad {padding: 0;}
}
.column {
	display: block;
	float: left;
	position: relative;
	@if $col_pad { padding: $col_pad; }

	&:last-child:not([class*='pull'], :first-child) {float: right;}
	&.nopad {padding: 0;}
}
@for $x from 1 through $grid_column_count {

	// Set grid
	.#{$bp_default}-#{$x}, .all-#{$x} {
		width: round($x / $grid_column_count * 100%);
	}
	// Multiple rows of .columns in one .row
	.multi-row .#{$bp_default}-#{$x}:nth-child(#{ $grid_column_count / $x }n+1) {
		clear: both;
	}

	// Push and pull
	.#{$bp_default}-push-#{$x} {
		left: round($x / $grid_column_count * 100%);
		right: auto;
	}
	.#{$bp_default}-pull-#{$x} {
		left: auto;
		right: round($x / $grid_column_count * 100%);
	}

}

/*
** "Just put it in a table"
*/
.row.table {
  display: table;
  table-layout: fixed;

	&.va-t .column {vertical-align: top;}
	&.va-b .column {vertical-align: bottom;}
	> .column {
		@extend %tcell;

		&, &:last-child {float: none;}
	}
}

/*
** Responsive
*/
// Get index of media query chosen to start stacking
$stack_columns_index: index_from_key($break_points, $bp_stack_columns);

@each $mq in $media_queries {
@media (nth($mq, 2)) {

	// For the stacked media query and smaller
	@if index($media_queries, $mq) >= $stack_columns_index {

		// Set grid
		@for $x from 1 through $grid_column_count {
		  .#{$bp_default}-#{$x} {
		  	width: 100%;

		  	&, &:last-child:not([class*='pull'], :first-child) {float: none;}
		  }
		}

		// Push and pull
		[class*='push'], [class*='pull'] {left: auto; right: auto;}

		// CSS Tables
		.row.table.stacked {
			&, > .column {display: block; float: left;}
		}
	}

	// For each media query
	@for $x from 1 through $grid_column_count {
		// Set grid
		.#{ nth($mq, 1) }-#{ $x } {
			width: round($x / $grid_column_count * 100%);
			float: left;

			&:last-child:not([class*='pull'], :first-child) {float: right;}
		}

		// Multiple rows of .columns in one .row
		.multi-row .#{ nth($mq, 1) }-#{ $x }:nth-child(#{ $grid_column_count / $x }n+1) {
			clear: both;
		}

		// Push and pull
		.#{ nth($mq, 1) }-push-#{$x} {
			left: round($x / $grid_column_count * 100%);
			right: auto;
		}
		.#{ nth($mq, 1) }-pull-#{$x} {
			left: auto;
			right: round($x / $grid_column_count * 100%);
		}
	}

	// Full width shouldn't be pushed or pulled
	.#{ nth($mq, 1) }-#{ $grid_column_count } {left: auto; right: auto;}

}
}
